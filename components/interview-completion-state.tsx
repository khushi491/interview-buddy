"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import {
  BarChart3,
  RefreshCw,
  Download,
  Share2,
  Trophy,
  Target,
  MessageSquare,
  Clock,
  Calendar,
  User,
} from "lucide-react";
import Link from "next/link";
import { useRouter } from "next/navigation";

interface InterviewCompletionStateProps {
  interview: {
    id: string;
    position: string;
    interviewType: string;
    status: string;
    duration?: number;
    createdAt: string;
    completedAt?: string;
    transcript: any;
    InterviewAnalysis?: any[];
  };
  onRetake?: () => void;
}

export function InterviewCompletionState({
  interview,
  onRetake,
}: InterviewCompletionStateProps) {
  const router = useRouter();
  const [isRetaking, setIsRetaking] = useState(false);

  const analysis = interview.InterviewAnalysis?.[0];
  const hasAnalysis = analysis && interview.status === "completed";

  const formatDuration = (seconds?: number) => {
    if (!seconds) return "N/A";
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const handleRetake = async () => {
    if (isRetaking) return;

    setIsRetaking(true);

    try {
      // Create a new interview with the same configuration
      const response = await fetch("/api/interviews", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          type: "AUDIO", // video interviews use AUDIO type
          position: interview.position,
          interviewType: interview.interviewType,
          flow: {}, // Will be generated by the backend
        }),
      });

      if (response.ok) {
        const result = await response.json();
        const newInterviewId = result.interview.id;

        // Redirect to the new interview
        router.push(`/video-interview/${newInterviewId}`);
      } else {
        throw new Error("Failed to create new interview");
      }
    } catch (error) {
      console.error("Error creating new interview:", error);
      alert("Failed to create new interview. Please try again.");
    } finally {
      setIsRetaking(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-gray-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
      <div className="max-w-4xl mx-auto p-6">
        {/* Header */}
        <Card className="mb-6">
          <CardHeader className="text-center">
            <div className="mx-auto w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mb-4">
              <Trophy className="w-8 h-8 text-green-600 dark:text-green-400" />
            </div>
            <CardTitle className="text-2xl font-bold">
              Interview Completed!
            </CardTitle>
            <p className="text-muted-foreground">
              Great job completing your {interview.interviewType} interview for{" "}
              {interview.position}
            </p>
          </CardHeader>
        </Card>

        {/* Interview Summary */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="w-5 h-5" />
              Interview Summary
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div className="flex items-center gap-2">
                  <User className="w-4 h-4 text-muted-foreground" />
                  <span className="font-medium">Position:</span>
                  <span className="text-muted-foreground">
                    {interview.position}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <MessageSquare className="w-4 h-4 text-muted-foreground" />
                  <span className="font-medium">Type:</span>
                  <span className="text-muted-foreground">
                    {interview.interviewType}
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <Clock className="w-4 h-4 text-muted-foreground" />
                  <span className="font-medium">Duration:</span>
                  <span className="text-muted-foreground">
                    {formatDuration(interview.duration)}
                  </span>
                </div>
              </div>
              <div className="space-y-4">
                <div className="flex items-center gap-2">
                  <Calendar className="w-4 h-4 text-muted-foreground" />
                  <span className="font-medium">Started:</span>
                  <span className="text-muted-foreground">
                    {formatDate(interview.createdAt)}
                  </span>
                </div>
                {interview.completedAt && (
                  <div className="flex items-center gap-2">
                    <Calendar className="w-4 h-4 text-muted-foreground" />
                    <span className="font-medium">Completed:</span>
                    <span className="text-muted-foreground">
                      {formatDate(interview.completedAt)}
                    </span>
                  </div>
                )}
                <div className="flex items-center gap-2">
                  <Badge
                    variant={
                      interview.status === "completed" ? "default" : "secondary"
                    }
                  >
                    {interview.status === "completed"
                      ? "Completed"
                      : "In Progress"}
                  </Badge>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Analytics */}
        {hasAnalysis ? (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="w-5 h-5" />
                Interview Analysis
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Overall Score */}
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium">Overall Score</span>
                    <span className="text-2xl font-bold text-primary">
                      {analysis.overallScore}/10
                    </span>
                  </div>
                  <Progress
                    value={analysis.overallScore * 10}
                    className="h-3"
                  />
                </div>

                {/* Recommendation */}
                <div className="flex items-center gap-2">
                  <span className="font-medium">Recommendation:</span>
                  <Badge
                    variant={
                      analysis.recommendation === "HIRE"
                        ? "default"
                        : analysis.recommendation === "MAYBE"
                          ? "secondary"
                          : "destructive"
                    }
                  >
                    {analysis.recommendation}
                  </Badge>
                </div>

                {/* Summary */}
                <div>
                  <h4 className="font-medium mb-2">Summary</h4>
                  <p className="text-muted-foreground">{analysis.summary}</p>
                </div>

                {/* Strengths */}
                {analysis.strengths && analysis.strengths.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-2">Strengths</h4>
                    <ul className="space-y-1">
                      {analysis.strengths.map(
                        (strength: string, index: number) => (
                          <li
                            key={index}
                            className="flex items-center gap-2 text-sm text-muted-foreground"
                          >
                            <div className="w-1.5 h-1.5 bg-green-500 rounded-full" />
                            {strength}
                          </li>
                        )
                      )}
                    </ul>
                  </div>
                )}

                {/* Areas for Improvement */}
                {analysis.improvementAreas &&
                  analysis.improvementAreas.length > 0 && (
                    <div>
                      <h4 className="font-medium mb-2">
                        Areas for Improvement
                      </h4>
                      <ul className="space-y-1">
                        {analysis.improvementAreas.map(
                          (area: string, index: number) => (
                            <li
                              key={index}
                              className="flex items-center gap-2 text-sm text-muted-foreground"
                            >
                              <div className="w-1.5 h-1.5 bg-orange-500 rounded-full" />
                              {area}
                            </li>
                          )
                        )}
                      </ul>
                    </div>
                  )}
              </div>
            </CardContent>
          </Card>
        ) : (
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>Analysis</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8">
                <BarChart3 className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-semibold mb-2">
                  Analysis Not Available
                </h3>
                <p className="text-muted-foreground">
                  The interview analysis is still being processed or is not
                  available.
                </p>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Action Buttons */}
        <Card>
          <CardHeader>
            <CardTitle>What would you like to do next?</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col sm:flex-row gap-4">
              <Button
                onClick={handleRetake}
                disabled={isRetaking}
                className="flex-1"
                variant="outline"
              >
                <RefreshCw
                  className={`w-4 h-4 mr-2 ${isRetaking ? "animate-spin" : ""}`}
                />
                {isRetaking ? "Creating..." : "Retake Interview"}
              </Button>

              <Button
                onClick={() => router.push(`/interview-report/${interview.id}`)}
                className="flex-1"
              >
                <BarChart3 className="w-4 h-4 mr-2" />
                View Full Report
              </Button>

              <Button
                onClick={() => router.push("/interview")}
                variant="outline"
                className="flex-1"
              >
                <MessageSquare className="w-4 h-4 mr-2" />
                Start New Interview
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
